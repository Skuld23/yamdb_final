name: Yamdb workflow

on: [push]

jobs:
  tests:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.7

    - name: Install dependencies
      run: | 
        python -m pip install --upgrade pip 
        pip install flake8 pep8-naming flake8-broken-line flake8-return flake8-isort
        cd api_yamdb
        pip install -r requirements.txt 

    - name: Test with flake8 and pytest
      run: |
        python -m flake8
        pytest

  build_and_push_to_docker_hub:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Check out the repo
        uses: actions/checkout@v2
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1
      - name: Login to Docker
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Push to Docker Hub
        uses: docker/build-push-action@v2
        with:
          context: ./api_yamdb/
          push: true
          tags: ${{ secrets.DOCKER_USERNAME }}/api_yamdb:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build_and_push_to_docker_hub
    if: github.ref == 'refs/heads/main'
    steps:
      - name: executing remote ssh commands to deploy
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USER }}
          key: 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
          script: |
            sudo docker-compose stop
            sudo docker-compose rm web
            touch .env
            echo DB_ENGINE=${{ secrets.DB_ENGINE }} >> .env
            echo DB_NAME=${{ secrets.DB_NAME }} >> .env
            echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
            echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
            echo DB_HOST=${{ secrets.DB_HOST }} >> .env
            echo DB_PORT=${{ secrets.DB_PORT }} >> .env
            sudo docker-compose up -d 
 

  send_message:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - name: send message
        uses: appleboy/telegram-action@master
        with:
          to: ${{ secrets.TELEGRAM_TO }}
          token: ${{ secrets.TELEGRAM_TOKEN }}
          message: ${{ github.workflow }} успешно выполнен!
